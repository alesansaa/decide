import random
import itertools
import time
import os
import tarfile
import shutil

from django.test import TestCase

from rest_framework.test import APIClient
from rest_framework.test import APITestCase

from django.contrib.staticfiles.testing import StaticLiveServerTestCase
from django.contrib.auth.models import User
from base.tests import BaseTestCase

# Generated by Selenium IDE
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from base import mods


class PostProcTestCase(APITestCase):

    def setUp(self):
        self.client = APIClient()
        mods.mock_query(self.client)

    def tearDown(self):
        self.client = None

    def test_identity(self):
        data = {
            'type': 'IDENTITY',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 5},
                {'option': 'Option 2', 'number': 2, 'votes': 0},
                {'option': 'Option 3', 'number': 3, 'votes': 3},
                {'option': 'Option 4', 'number': 4, 'votes': 2},
                {'option': 'Option 5', 'number': 5, 'votes': 5},
                {'option': 'Option 6', 'number': 6, 'votes': 1},
            ]
        }

        expected_result = [
            {'option': 'Option 1', 'number': 1, 'votes': 5, 'postproc': 5},
            {'option': 'Option 5', 'number': 5, 'votes': 5, 'postproc': 5},
            {'option': 'Option 3', 'number': 3, 'votes': 3, 'postproc': 3},
            {'option': 'Option 4', 'number': 4, 'votes': 2, 'postproc': 2},
            {'option': 'Option 6', 'number': 6, 'votes': 1, 'postproc': 1},
            {'option': 'Option 2', 'number': 2, 'votes': 0, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)



    def test_dhont1(self):
        data = {
            'type': 'DHONT',
            'seats': 10,
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 10 },
                { 'option': 'Option 2', 'number': 2, 'votes': 0 },
                { 'option': 'Option 3', 'number': 3, 'votes': 7 },
                { 'option': 'Option 4', 'number': 4, 'votes': 2 },
                { 'option': 'Option 5', 'number': 5, 'votes': 5 },
                { 'option': 'Option 6', 'number': 6, 'votes': 1 },
            ]
        }
        expected_result = [
            { 'option': 'Option 1', 'number': 1, 'votes': 10, 'postproc': 5 },
            { 'option': 'Option 3', 'number': 3, 'votes': 7, 'postproc': 3 },
            { 'option': 'Option 5', 'number': 5, 'votes': 5, 'postproc': 2 },
            { 'option': 'Option 4', 'number': 4, 'votes': 2, 'postproc': 0 },
            { 'option': 'Option 6', 'number': 6, 'votes': 1, 'postproc': 0 },
            { 'option': 'Option 2', 'number': 2, 'votes': 0, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_dhont_2(self):
        seats = 5
        data = {
            'type': 'DHONT',
            'seats': seats,
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 10},
                {'option': 'Option 2', 'number': 2, 'votes': 0},
                {'option': 'Option 3', 'number': 3, 'votes': 6},
                {'option': 'Option 4', 'number': 4, 'votes': 4},
                {'option': 'Option 5', 'number': 5, 'votes': 10},
                {'option': 'Option 6', 'number': 6, 'votes': 2},
                {'option': 'Option 7', 'number': 7, 'votes': 6},
            ]
        }

        expected_result = [
            {'option': 'Option 1', 'number': 1, 'votes': 10, 'postproc': 2},
            {'option': 'Option 5', 'number': 5, 'votes': 10, 'postproc': 1},
            {'option': 'Option 3', 'number': 3, 'votes': 6, 'postproc': 1},
            {'option': 'Option 7', 'number': 7, 'votes': 6, 'postproc': 1},
            {'option': 'Option 4', 'number': 4, 'votes': 4, 'postproc': 0},
            {'option': 'Option 6', 'number': 6, 'votes': 2, 'postproc': 0},
            {'option': 'Option 2', 'number': 2, 'votes': 0, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)

    # Test en el que no se define la variable type en el json data
    def test_no_type(self):
        seats = 5
        data = {
            'seats': seats,
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 9},
                {'option': 'Option 2', 'number': 2, 'votes': 0},
                {'option': 'Option 3', 'number': 3, 'votes': 6},
                {'option': 'Option 4', 'number': 4, 'votes': 4},
                {'option': 'Option 5', 'number': 5, 'votes': 8},
                {'option': 'Option 6', 'number': 6, 'votes': 2},
                {'option': 'Option 7', 'number': 7, 'votes': 5},

            ]
        }
        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_relativa1(self):
        data = {
            'type': 'RELATIVA',
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 7 },
                { 'option': 'Option 2', 'number': 2, 'votes': 4 },
                { 'option': 'Option 3', 'number': 3, 'votes': 6 },
            ]
        }

        expected_result = [
            { 'option': 'Option 1', 'number': 1, 'votes': 7, 'postproc': 1 },
            { 'option': 'Option 3', 'number': 3, 'votes': 6, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_relativa2(self):
        data = {
            'type': 'RELATIVA',
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 2 },
                { 'option': 'Option 2', 'number': 2, 'votes': 8 },
            ]
        }

        expected_result = [
            { 'option': 'Option 2', 'number': 2, 'votes': 8, 'postproc': 1 },
            { 'option': 'Option 1', 'number': 1, 'votes': 2, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_relativa3(self):
        data = {
            'type': 'RELATIVA',
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 1 },
                { 'option': 'Option 2', 'number': 2, 'votes': 2 },
                { 'option': 'Option 3', 'number': 3, 'votes': 3 },
                { 'option': 'Option 4', 'number': 4, 'votes': 4 },
            ]
        }

        expected_result = [
            { 'option': 'Option 4', 'number': 4, 'votes': 4, 'postproc': 1 },
            { 'option': 'Option 3', 'number': 3, 'votes': 3, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_relativa4(self):
        data = {
            'type': 'RELATIVA',
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 0 },
                { 'option': 'Option 2', 'number': 2, 'votes': 0 },
                { 'option': 'Option 3', 'number': 3, 'votes': 8 },
                { 'option': 'Option 4', 'number': 4, 'votes': 2 },
                { 'option': 'Option 5', 'number': 5, 'votes': 0 },
            ]
        }

        expected_result = [
                { 'option': 'Option 3', 'number': 3, 'votes': 8, 'postproc': 1 },
                { 'option': 'Option 4', 'number': 4, 'votes': 2, 'postproc': 0 },
                { 'option': 'Option 1', 'number': 1, 'votes': 0, 'postproc': 0 },
                { 'option': 'Option 2', 'number': 2, 'votes': 0, 'postproc': 0 },
                { 'option': 'Option 5', 'number': 5, 'votes': 0, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_absoluta1(self):
        data = {
            'type': 'ABSOLUTA',
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 2 },
                { 'option': 'Option 2', 'number': 2, 'votes': 2 },
            ]
        }

        expected_result = [
                { 'option': 'Option 1', 'number': 1, 'votes': 2, 'postproc': 0 },
                { 'option': 'Option 2', 'number': 2, 'votes': 2, 'postproc': 0 },
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_absoluta2(self):
        data = {
            'type': 'ABSOLUTA',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 100},
                {'option': 'Option 2', 'number': 2, 'votes': 0},
                {'option': 'Option 3', 'number': 3, 'votes': 6},
                {'option': 'Option 4', 'number': 4, 'votes': 4},
                {'option': 'Option 5', 'number': 5, 'votes': 10},
                {'option': 'Option 6', 'number': 6, 'votes': 2},
                {'option': 'Option 7', 'number': 7, 'votes': 6},
            ]
        }

        expected_result = [
                {'option': 'Option 1', 'number': 1, 'votes': 100, 'postproc': 1},
                {'option': 'Option 5', 'number': 5, 'votes': 10, 'postproc': 0},
                {'option': 'Option 3', 'number': 3, 'votes': 6, 'postproc': 0},
                {'option': 'Option 7', 'number': 7, 'votes': 6, 'postproc': 0},
                {'option': 'Option 4', 'number': 4, 'votes': 4, 'postproc': 0},
                {'option': 'Option 6', 'number': 6, 'votes': 2, 'postproc': 0},
                {'option': 'Option 2', 'number': 2, 'votes': 0, 'postproc': 0},

        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_absoluta3(self):
        data = {
            'type': 'ABSOLUTA',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 74},
                {'option': 'Option 2', 'number': 2, 'votes': 12},
                {'option': 'Option 3', 'number': 3, 'votes': 89},
                {'option': 'Option 4', 'number': 4, 'votes': 27},
                {'option': 'Option 5', 'number': 5, 'votes': 46},
                {'option': 'Option 6', 'number': 6, 'votes': 21},
                {'option': 'Option 7', 'number': 7, 'votes': 17},
                {'option': 'Option 8', 'number': 8, 'votes': 41},
            ]
        }

        expected_result = [
                {'option': 'Option 3', 'number': 3, 'votes': 89, 'postproc': 0},
                {'option': 'Option 1', 'number': 1, 'votes': 74, 'postproc': 0},
                {'option': 'Option 5', 'number': 5, 'votes': 46, 'postproc': 0},
                {'option': 'Option 8', 'number': 8, 'votes': 41, 'postproc': 0},
                {'option': 'Option 4', 'number': 4, 'votes': 27, 'postproc': 0},
                {'option': 'Option 6', 'number': 6, 'votes': 21, 'postproc': 0},
                {'option': 'Option 7', 'number': 7, 'votes': 17, 'postproc': 0},
                {'option': 'Option 2', 'number': 2, 'votes': 12, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_absoluta4(self):
        data = {
            'type': 'ABSOLUTA',
            'options': [
                {'option': 'PP', 'number': 1, 'votes': 10867344},
                {'option': 'PSOE', 'number': 2, 'votes': 7003511},
                {'option': 'CiU', 'number': 3, 'votes': 1015691},
                {'option': 'IU', 'number': 4, 'votes': 1686040},
            ]
        }

        expected_result = [
                {'option': 'PP', 'number': 1, 'votes': 10867344, 'postproc': 1},
                {'option': 'PSOE', 'number': 2, 'votes': 7003511, 'postproc': 0},
                {'option': 'IU', 'number': 4, 'votes': 1686040, 'postproc': 0},
                {'option': 'CiU', 'number': 3, 'votes': 1015691, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    # Test en el que no se le pasa la variable options en el json data
    def test_no_options(self):
        seats = 5
        data = {
            'type': 'DHONT',
            'seats': seats
        }
        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)

     # Test en el que no se le pasa la variable seats en el json data
    def test_no_seats(self):
        data = {
            'type': 'DHONT',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 18},
                {'option': 'Option 2', 'number': 2, 'votes': 3},
                {'option': 'Option 3', 'number': 3, 'votes': 6},

            ]
        }
        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)


    def test_paridad(self):

        candidates1 = [{'name': 'Candidate1', 'gender': 'M'},
                       {'name': 'Candidate2', 'gender': 'H'},
                       {'name': 'Candidate3', 'gender': 'M'},
                       {'name': 'Candidate4', 'gender': 'H'},
                       {'name': 'Candidate5', 'gender': 'H'}]

        candidates2 = [{'name': 'Candidate6', 'gender': 'H'},
                       {'name': 'Candidate7', 'gender': 'M'},
                       {'name': 'Candidate8', 'gender': 'M'},
                       {'name': 'Candidate9', 'gender': 'H'},
                       {'name': 'Candidate10', 'gender': 'H'}]

        candidates3 = [{'name': 'Candidate11', 'gender': 'H'},
                       {'name': 'Candidate12', 'gender': 'H'},
                       {'name': 'Candidate13', 'gender': 'M'},
                       {'name': 'Candidate14', 'gender': 'M'},
                       {'name': 'Candidate15', 'gender': 'M'}]

        candidates4 = [{'name': 'Candidate16', 'gender': 'H'},
                       {'name': 'Candidate17', 'gender': 'M'},
                       {'name': 'Candidate18', 'gender': 'M'},
                       {'name': 'Candidate19', 'gender': 'H'},
                       {'name': 'Candidate20', 'gender': 'M'}]

        candidates5 = [{'name': 'Candidate21', 'gender': 'M'},
                       {'name': 'Candidate22', 'gender': 'H'},
                       {'name': 'Candidate23', 'gender': 'M'},
                       {'name': 'Candidate24', 'gender': 'H'},
                       {'name': 'Candidate25', 'gender': 'M'}]

        candidates6 = [{'name': 'Candidate26', 'gender': 'M'},
                       {'name': 'Candidate27', 'gender': 'M'},
                       {'name': 'Candidate28', 'gender': 'M'},
                       {'name': 'Candidate29', 'gender': 'H'},
                       {'name': 'Candidate30', 'gender': 'M'}]
        data = {
            'type': 'DHONT',
            'paridad': True,
            'seats': 10,
            'options': [
                { 'option': 'Option 1', 'number': 1, 'votes': 10, 'candidates': candidates1 },
                { 'option': 'Option 2', 'number': 2, 'votes': 0, 'candidates': candidates2 },
                { 'option': 'Option 3', 'number': 3, 'votes': 7, 'candidates': candidates3 },
                { 'option': 'Option 4', 'number': 4, 'votes': 2, 'candidates': candidates4 },
                { 'option': 'Option 5', 'number': 5, 'votes': 5, 'candidates': candidates5 },
                { 'option': 'Option 6', 'number': 6, 'votes': 1, 'candidates': candidates6 },
            ]
        }

        seated1 = [{'name': 'Candidate1', 'gender': 'M'},
                       {'name': 'Candidate2', 'gender': 'H'},
                       {'name': 'Candidate3', 'gender': 'M'},
                       {'name': 'Candidate4', 'gender': 'H'},
                       {'name': 'Candidate5', 'gender': 'H'}]

        seated3 = [{'name': 'Candidate11', 'gender': 'H'},
                       {'name': 'Candidate13', 'gender': 'M'},
                       {'name': 'Candidate12', 'gender': 'H'},
                       ]

        seated5 = [{'name': 'Candidate21', 'gender': 'M'},
                       {'name': 'Candidate22', 'gender': 'H'},
                       ]

        expected_result = [
            { 'option': 'Option 1', 'number': 1, 'votes': 10, 'candidates': candidates1, 'postproc': 5, 'seated': seated1 },
            { 'option': 'Option 3', 'number': 3, 'votes': 7, 'candidates': candidates3 , 'postproc': 3, 'seated': seated3  },
            { 'option': 'Option 5', 'number': 5, 'votes': 5, 'candidates': candidates5, 'postproc': 2, 'seated': seated5  },
            { 'option': 'Option 4', 'number': 4, 'votes': 2, 'candidates': candidates4, 'postproc': 0, 'seated': []},
            { 'option': 'Option 6', 'number': 6, 'votes': 1, 'candidates': candidates6 , 'postproc': 0, 'seated': []},
            { 'option': 'Option 2', 'number': 2, 'votes': 0, 'candidates': candidates2 , 'postproc': 0, 'seated': []},
          ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_paridad2(self):

        candidates1 = [{'name': 'Candidate1', 'gender': 'M'},
                       {'name': 'Candidate2', 'gender': 'H'},
                       {'name': 'Candidate3', 'gender': 'M'},
                       {'name': 'Candidate4', 'gender': 'H'},
                       {'name': 'Candidate5', 'gender': 'H'}]

        candidates2 = [{'name': 'Candidate6', 'gender': 'H'},
                       {'name': 'Candidate7', 'gender': 'M'},
                       {'name': 'Candidate8', 'gender': 'M'},
                       {'name': 'Candidate9', 'gender': 'H'},
                       {'name': 'Candidate10', 'gender': 'H'}]

        candidates3 = [{'name': 'Candidate11', 'gender': 'H'},
                       {'name': 'Candidate12', 'gender': 'H'},
                       {'name': 'Candidate13', 'gender': 'M'},
                       {'name': 'Candidate14', 'gender': 'M'},
                       {'name': 'Candidate15', 'gender': 'M'}]

        candidates4 = [{'name': 'Candidate16', 'gender': 'H'},
                       {'name': 'Candidate17', 'gender': 'M'},
                       {'name': 'Candidate18', 'gender': 'M'},
                       {'name': 'Candidate19', 'gender': 'H'},
                       {'name': 'Candidate20', 'gender': 'M'}]

        candidates5 = [{'name': 'Candidate21', 'gender': 'M'},
                       {'name': 'Candidate22', 'gender': 'H'},
                       {'name': 'Candidate23', 'gender': 'M'},
                       {'name': 'Candidate24', 'gender': 'H'},
                       {'name': 'Candidate25', 'gender': 'M'}]

        candidates6 = [{'name': 'Candidate26', 'gender': 'M'},
                       {'name': 'Candidate27', 'gender': 'M'},
                       {'name': 'Candidate28', 'gender': 'M'},
                       {'name': 'Candidate29', 'gender': 'H'},
                       {'name': 'Candidate30', 'gender': 'M'}]

        candidates7 = [{'name': 'Candidate31', 'gender': 'M'},
                       {'name': 'Candidate32', 'gender': 'H'},
                       {'name': 'Candidate33', 'gender': 'M'},
                       {'name': 'Candidate34', 'gender': 'H'},
                       {'name': 'Candidate35', 'gender': 'H'}]
        data = {
            'type': 'DHONT',
            'paridad': True,
            'seats': 5,
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 10, 'candidates': candidates1},
                {'option': 'Option 2', 'number': 2, 'votes': 0, 'candidates': candidates2},
                {'option': 'Option 3', 'number': 3, 'votes': 6, 'candidates': candidates3},
                {'option': 'Option 4', 'number': 4, 'votes': 4, 'candidates': candidates4},
                {'option': 'Option 5', 'number': 5, 'votes': 10, 'candidates': candidates5},
                {'option': 'Option 6', 'number': 6, 'votes': 2, 'candidates': candidates6},
                {'option': 'Option 7', 'number': 7, 'votes': 6, 'candidates': candidates7},
            ]
        }

        seated1 = [{'name': 'Candidate1', 'gender': 'M'},
                       {'name': 'Candidate2', 'gender': 'H'},
                       ]

        seated3 = [{'name': 'Candidate11', 'gender': 'H'},
                       ]

        seated5 = [{'name': 'Candidate21', 'gender': 'M'},
                       ]

        seated7 = [{'name': 'Candidate31', 'gender': 'M'},
                      ]

        expected_result = [
            {'option': 'Option 1', 'number': 1, 'votes': 10, 'candidates': candidates1, 'postproc': 2,'seated': seated1},
            {'option': 'Option 5', 'number': 5, 'votes': 10, 'candidates': candidates5, 'postproc': 1,'seated': seated5},
            {'option': 'Option 3', 'number': 3, 'votes': 6, 'candidates': candidates3, 'postproc': 1,'seated': seated3},
            {'option': 'Option 7', 'number': 7, 'votes': 6, 'candidates': candidates7, 'postproc': 1,'seated': seated7},
            {'option': 'Option 4', 'number': 4, 'votes': 4, 'candidates': candidates4, 'postproc': 0,'seated': []},
            {'option': 'Option 6', 'number': 6, 'votes': 2, 'candidates': candidates6, 'postproc': 0,'seated': []},
            {'option': 'Option 2', 'number': 2, 'votes': 0, 'candidates': candidates2, 'postproc': 0,'seated': []},
           ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    def test_borda1(self):
        data = {
            'type': 'BORDA',
            'order_options': [
                {'option': 'Option 1', 'number': 1, 'order_number': '1', 'votes': 80},
                {'option': 'Option 2', 'number': 2, 'order_number': '1', 'votes': 15},
                {'option': 'Option 3', 'number': 3, 'order_number': '1', 'votes': 5},
                {'option': 'Option 1', 'number': 1, 'order_number': '2', 'votes': 5},
                {'option': 'Option 2', 'number': 2, 'order_number': '2', 'votes': 80},
                {'option': 'Option 3', 'number': 3, 'order_number': '2', 'votes': 15},
                {'option': 'Option 1', 'number': 1, 'order_number': '3', 'votes': 15},
                {'option': 'Option 2', 'number': 2, 'order_number': '3', 'votes': 5},
                {'option': 'Option 3', 'number': 3, 'order_number': '3', 'votes': 80},
            ]
        }

        expected_result = [
                {'option': 'Option 1', 'number': 1, 'order_number': '1', 'votes': 80, 'postproc': 265},
                {'option': 'Option 2', 'number': 2, 'order_number': '1', 'votes': 15, 'postproc': 210},
                {'option': 'Option 3', 'number': 3, 'order_number': '1', 'votes': 5, 'postproc': 125},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        print(values)
        self.assertEqual(values, expected_result)

    def test_borda2(self):
        data = {
            'type': 'BORDA',
            'order_options': [
                {'option': 'Option 1', 'number': 1, 'order_number': '1', 'votes': 50},
                {'option': 'Option 2', 'number': 2, 'order_number': '1', 'votes': 50},
                {'option': 'Option 3', 'number': 3, 'order_number': '1', 'votes': 0},
                {'option': 'Option 1', 'number': 1, 'order_number': '2', 'votes': 20},
                {'option': 'Option 2', 'number': 2, 'order_number': '2', 'votes': 20},
                {'option': 'Option 3', 'number': 3, 'order_number': '2', 'votes': 60},
                {'option': 'Option 1', 'number': 1, 'order_number': '3', 'votes': 30},
                {'option': 'Option 2', 'number': 2, 'order_number': '3', 'votes': 30},
                {'option': 'Option 3', 'number': 3, 'order_number': '3', 'votes': 40},
            ]
        }

        expected_result = [
                {'option': 'Option 1', 'number': 1, 'order_number': '1', 'votes': 50, 'postproc': 220},
                {'option': 'Option 2', 'number': 2, 'order_number': '1', 'votes': 50, 'postproc': 220},
                {'option': 'Option 3', 'number': 3, 'order_number': '1', 'votes': 0, 'postproc': 160},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)
        values = response.json()
        self.assertEqual(values, expected_result)

    #Test en el que se le pasa una votación normal, no una con order_options
    def test_no_order_options(self):
        data = {
            'type': 'BORDA',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes': 10},
                {'option': 'Option 2', 'number': 2, 'votes': 5},
                {'option': 'Option 3', 'number': 3, 'votes': 6},
                {'option': 'Option 4', 'number': 4, 'votes': 8},
                {'option': 'Option 3', 'number': 3, 'votes': 0},

            ],
            'order_options': []
        }

        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)


    def test_substrat_1(self):
        seats = 8
        data = {
            'seats': seats,
            'type': 'SUBTRAC',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes_add': 10, 'votes_subtract':12},
                {'option': 'Option 2', 'number': 2, 'votes_add': 5, 'votes_subtract':2},
                {'option': 'Option 3', 'number': 3, 'votes_add': 6, 'votes_subtract':1},
                {'option': 'Option 4', 'number': 4, 'votes_add': 8, 'votes_subtract':2},
                {'option': 'Option 5', 'number': 5, 'votes_add': 2, 'votes_subtract':0},

            ]
        }

        expected_result = [
            {'option': 'Option 4', 'number': 4, 'votes_add': 8, 'votes_subtract':2, 'votes': 6, 'postproc': 3},
            {'option': 'Option 3', 'number': 3, 'votes_add': 6, 'votes_subtract':1, 'votes': 5, 'postproc': 3},
            {'option': 'Option 2', 'number': 2, 'votes_add': 5, 'votes_subtract':2, 'votes': 3, 'postproc': 1},
            {'option': 'Option 5', 'number': 5, 'votes_add': 2, 'votes_subtract':0, 'votes': 2, 'postproc': 1},
            {'option': 'Option 1', 'number': 1, 'votes_add': 10, 'votes_subtract':12, 'votes': 0, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)


    def test_substrat_2(self):
        seats = 300
        data = {
            'seats': seats,
            'type': 'SUBTRAC',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes_add': 10032, 'votes_subtract':2345},
                {'option': 'Option 2', 'number': 2, 'votes_add': 423, 'votes_subtract':22},
                {'option': 'Option 3', 'number': 3, 'votes_add': 8002, 'votes_subtract':4231},
                {'option': 'Option 4', 'number': 4, 'votes_add': 1235, 'votes_subtract':1932},
                {'option': 'Option 5', 'number': 5, 'votes_add': 9012, 'votes_subtract':230},
                {'option': 'Option 6', 'number': 6, 'votes_add': 7000, 'votes_subtract': 4000},

            ]
        }

        expected_result = [
            {'option': 'Option 5', 'number': 5, 'votes_add': 9012, 'votes_subtract': 230, 'votes': 8782, 'postproc': 111},
            {'option': 'Option 1', 'number': 1, 'votes_add': 10032, 'votes_subtract': 2345, 'votes': 7687,'postproc': 98},
            {'option': 'Option 3', 'number': 3, 'votes_add': 8002, 'votes_subtract': 4231, 'votes': 3771,'postproc':48},
            {'option': 'Option 6', 'number': 6, 'votes_add': 7000, 'votes_subtract': 4000, 'votes': 3000,'postproc': 38},
            {'option': 'Option 2', 'number': 2, 'votes_add': 423, 'votes_subtract': 22, 'votes': 401, 'postproc': 5},
            {'option': 'Option 4', 'number': 4, 'votes_add': 1235, 'votes_subtract':1932, 'votes': 0, 'postproc': 0},
        ]

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 200)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_substrat_no_options(self):
        seats = 300
        data = {
            'seats': seats,
            'type': 'SUBTRAC',

        }

        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)


    def test_substrat_no_type(self):
        seats = 300
        data = {
            'seats': seats,
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes_add': 10032, 'votes_subtract':2345},
                {'option': 'Option 2', 'number': 2, 'votes_add': 423, 'votes_subtract':22},
                {'option': 'Option 3', 'number': 3, 'votes_add': 8002, 'votes_subtract':4231},
                {'option': 'Option 4', 'number': 4, 'votes_add': 1235, 'votes_subtract':1932},
                {'option': 'Option 5', 'number': 5, 'votes_add': 9012, 'votes_subtract':230},
                {'option': 'Option 6', 'number': 6, 'votes_add': 7000, 'votes_subtract': 4000},

            ]
        }

        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)

    def test_substrat_no_seats(self):
        data = {
            'type': 'SUBTRAC',
            'options': [
                {'option': 'Option 1', 'number': 1, 'votes_add': 10, 'votes_subtract':12},
                {'option': 'Option 2', 'number': 2, 'votes_add': 5, 'votes_subtract':2},
                {'option': 'Option 3', 'number': 3, 'votes_add': 6, 'votes_subtract':1},
                {'option': 'Option 4', 'number': 4, 'votes_add': 8, 'votes_subtract':2},
                {'option': 'Option 5', 'number': 5, 'votes_add': 2, 'votes_subtract':0},

            ]
        }

        expected_result = {}

        response = self.client.post('/postproc/', data, format='json')
        self.assertEqual(response.status_code, 400)

        values = response.json()
        self.assertEqual(values, expected_result)


class PostProcViewsTestCase(StaticLiveServerTestCase):

    def setUp(self):
        # Load base test functionality for decide
        self.base = BaseTestCase()
        self.base.setUp()

        self.vars = {}

        options = webdriver.ChromeOptions()
        options.headless = True
        self.driver = webdriver.Chrome(options=options)

        super().setUp()

    def tearDown(self):
        super().tearDown()
        self.driver.quit()

        self.base.tearDown()

    def wait_for_window(self, timeout = 2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def test_postproc_views_identidad(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc3")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'IDENTITY']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("2")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/2')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/2/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 1, 'number': 2, 'option': 'No', 'postproc': 1}, {'votes': 0, 'number': 1, 'option': 'Si', 'postproc': 0}"


    def test_postproc_views_identidad_tres_votos(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc4")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'IDENTITY']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion usuarios

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/auth/user/add/\')]").click()
        self.driver.find_element(By.ID, "id_username").send_keys("uno")
        self.driver.find_element(By.ID, "id_password1").click()
        self.driver.find_element(By.ID, "id_password1").send_keys("decide2020")
        self.driver.find_element(By.ID, "id_password2").click()
        self.driver.find_element(By.ID, "id_password2").send_keys("decide2020")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/auth/user/add/\')]").click()
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("dos")
        self.driver.find_element(By.ID, "id_password1").click()
        self.driver.find_element(By.ID, "id_password1").send_keys("decide2020")
        self.driver.find_element(By.ID, "id_password2").click()
        self.driver.find_element(By.ID, "id_password2").send_keys("decide2020")
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("3")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("3")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("2")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("3")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("3")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/3')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/3')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("uno")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'Si')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/3')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("dos")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/3/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 2, 'number': 2, 'option': 'No', 'postproc': 2}, {'votes': 1, 'number': 1, 'option': 'Si', 'postproc': 1}"


    def test_postproc_views_relativa(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc5")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'RELATIVA']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()


        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("4")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/4')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/4/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-tally .readonly").text == "2"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 1, 'number': 2, 'option': 'No', 'postproc': 1}, {'votes': 0, 'number': 1, 'option': 'Si', 'postproc': 0}"

    def test_postproc_views_relativa_tres_votos(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc6")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'RELATIVA']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("5")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("5")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("2")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("5")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("3")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/5')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/5')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("uno")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'Si')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/5')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("dos")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/5/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 2, 'number': 2, 'option': 'No', 'postproc': 1}, {'votes': 1, 'number': 1, 'option': 'Si', 'postproc': 0}"

    def test_postproc_views_zabsoluta_tres_votos(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc7")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'ABSOLUTA']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("6")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("6")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("2")
        self.driver.find_element(By.NAME, "_save").click()
        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("6")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("3")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/6')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/6')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("uno")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'Si')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)
        self.driver.get('http://localhost:8000/booth/6')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("dos")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/6/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 2, 'number': 2, 'option': 'No', 'postproc': 1}, {'votes': 1, 'number': 1, 'option': 'Si', 'postproc': 0}"


    def test_postproc_views_absoluta(self):
       
        #Log In

        # User.objects.create_superuser('maria', 'egc@decide.com', 'egcegcegc')
        self.driver.get('http://localhost:8000/admin/')
        self.driver.set_window_size(789, 986)
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020", Keys.ENTER)

        time.sleep(5)
        
        # Creacion pregunta

        driver = self.driver
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/question/add/\')]").click()
        driver.find_element_by_id("id_desc").click()
        driver.find_element_by_id("id_desc").send_keys("¿Tienes aprobada EGC?")
        driver.find_element_by_id("id_options-0-number").click()
        driver.find_element_by_id("id_options-0-number").send_keys("1")
        driver.find_element_by_id("id_options-0-option").click()
        driver.find_element_by_id("id_options-0-option").send_keys("Si")
        driver.find_element_by_id("id_options-1-number").click()
        driver.find_element_by_id("id_options-1-number").send_keys("2")
        driver.find_element_by_id("id_options-1-option").click()
        driver.find_element_by_id("id_options-1-option").send_keys("No")
        driver.find_element_by_name("_save").click()

        # Creacion votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/add/\')]").click()
        driver.find_element_by_id("id_name").click()
        driver.find_element_by_id("id_name").send_keys("EGC")
        dropdown = self.driver.find_element(By.ID, "id_question")
        dropdown.find_element(By.XPATH, "//option[. = '¿Tienes aprobada EGC?']").click()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_question")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_question").click()
        self.driver.find_element(By.ID, "id_slug").click()
        self.driver.find_element(By.ID, "id_slug").send_keys("egc2")
        dropdown = self.driver.find_element(By.ID, "id_voting_type")
        dropdown.find_element(By.XPATH, "//option[. = 'ABSOLUTA']").click()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.ID, "id_voting_type")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.ID, "id_voting_type").click()

        # Creacion de Auth        

        self.vars["window_handles"] = self.driver.window_handles
        self.driver.find_element(By.CSS_SELECTOR, "#add_id_auths > img").click()
        self.vars["win4952"] = self.wait_for_window(2000)
        self.vars["root"] = self.driver.current_window_handle
        self.driver.switch_to.window(self.vars["win4952"])
        self.driver.find_element(By.ID, "id_name").click()
        self.driver.find_element(By.ID, "id_name").send_keys("EGC")
        self.driver.find_element(By.ID, "id_url").click()
        self.driver.find_element(By.ID, "id_url").send_keys('http://localhost:8000')
        self.driver.find_element(By.NAME, "_save").click()

        # Terminar creacion votacion 

        self.driver.switch_to.window(self.vars["root"])
        self.driver.find_element(By.NAME, "_save").click()

        # Creacion de permisos

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        driver.find_element_by_xpath("//a[contains(@href, \'/admin/census/census/add/\')]").click()
        self.driver.find_element(By.ID, "id_voting_id").send_keys("1")
        self.driver.find_element(By.ID, "id_voter_id").click()
        self.driver.find_element(By.ID, "id_voter_id").send_keys("1")
        self.driver.find_element(By.NAME, "_save").click()
        
        # Iniciar votacion

        self.driver.find_element(By.LINK_TEXT, "Home").click()
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Start']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Votaciones 

        self.driver.get('http://localhost:8000/booth/1')
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("decide")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("decide2020")
        self.driver.find_element(By.ID, "username").submit()
        time.sleep(5)
        self.driver.find_element(By.XPATH, "//h1[contains(.,' - EGC')]")
        self.driver.find_element(By.XPATH, "//h2[contains(.,'¿Tienes aprobada EGC?')]")
        self.driver.find_element(By.XPATH, "//label[contains(.,'No')]").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn:nth-child(4)").click()
        time.sleep(5)
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(1)").click()
        self.driver.find_element(By.CSS_SELECTOR, "html").click()
        time.sleep(5)

        # Cerrar votación

        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.LINK_TEXT, "Votings").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Stop']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        #Log out y log in

        self.driver.find_element(By.CSS_SELECTOR, "a:nth-child(4)").click()
        self.driver.get('http://localhost:8000/admin')
        self.driver.find_element(By.ID, "id_username").click()
        self.driver.find_element(By.ID, "id_username").send_keys("decide")
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "content").click()
        self.driver.find_element(By.ID, "id_password").click()
        self.driver.find_element(By.ID, "id_password").send_keys("decide2020")
        self.driver.find_element(By.CSS_SELECTOR, ".submit-row > input").click()

        # Tally 

        driver.find_element_by_xpath("//a[contains(@href, \'/admin/voting/voting/\')]").click()
        self.driver.find_element(By.NAME, "_selected_action").click()
        dropdown = self.driver.find_element(By.NAME, "action")
        dropdown.find_element(By.XPATH, "//option[. = 'Tally']").click()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).click_and_hold().perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).perform()
        element = self.driver.find_element(By.NAME, "action")
        actions = ActionChains(self.driver)
        actions.move_to_element(element).release().perform()
        self.driver.find_element(By.NAME, "action").click()
        self.driver.find_element(By.NAME, "index").click()

        # Comprobacion de los resultados

        time.sleep(5)

        self.driver.get('http://localhost:8000/admin/voting/voting/1/change/')

        time.sleep(15)

        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc label").text == "Postproc:"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-tally .readonly").text == "2"
        assert self.driver.find_element(By.CSS_SELECTOR, ".field-postproc .readonly").text  == "{'votes': 1, 'number': 2, 'option': 'No', 'postproc': 1}, {'votes': 0, 'number': 1, 'option': 'Si', 'postproc': 0}"